<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

	<context:annotation-config />

	<task:annotation-driven executor="executor" />
	<task:executor id="executor" pool-size="1" />

	<bean id="properties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="WEB-INF/system.properties" />
	</bean>

	<!-- retry advice for external service call -->
	<bean id="mailRetryAdvice"
		class="org.springframework.retry.interceptor.RetryOperationsInterceptor">
		<description>
			Advice for mail service call, any exceptions listed
			in map
			and specify
			value to 'true'
			will result in a complete retry.
		</description>
		<property name="retryOperations">
			<bean class="org.springframework.retry.support.RetryTemplate">
				<property name="backOffPolicy">
					<bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
						<property name="initialInterval" value="1000" />
						<property name="multiplier" value="30" />
						<property name="maxInterval" value="600000" />
					</bean>
				</property>
				<property name="retryPolicy">
					<bean class="org.springframework.retry.policy.SimpleRetryPolicy">
						<!-- maxAttempts -->
						<constructor-arg index="0" value="5" />
						<constructor-arg index="1">
							<util:map>
								<!-- true means will retry, false means won't -->
								<entry key="org.springframework.mail.MailException" value="true" />
							</util:map>
						</constructor-arg>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<!-- SET default mail properties -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${smtp.host}" />
		<property name="port" value="${smtp.port}" />
		<property name="username" value="${smtp.username}" />
		<property name="password" value="${smtp.password}" />
		<property name="defaultEncoding" value="big5" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>

	<bean id="mailWritter" class="util.MailWritterImpl">
		<property name="header" value="${mail.header}" />
		<property name="footer" value="${mail.footer}" />
		<property name="systemUrl" value="${mail.url}" />
	</bean>

	<bean id="mailService" class="service.impl.MailServiceImpl">
		<constructor-arg ref="mailSender" />
	</bean>

	<aop:config>
		<aop:advisor
			pointcut="execution(public * org.springframework.mail.javamail.JavaMailSenderImpl.send(..))"
			advice-ref="mailRetryAdvice" />
	</aop:config>

	<bean class="resources.DemoData">
	</bean>


	<!-- DATABASE SETUP -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="username" value="postgres" />
		<property name="password" value="2ggudoou" />
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/btrs2" />
	</bean>

	<bean id="dataSourceAttendance" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="username" value="postgres" />
		<property name="password" value="2ggudoou" />
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost:5432/demo3" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="btrsPU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
				<property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
			</props>
		</property>
	</bean>

	<bean id="entityManagerFactoryAttendance"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSourceAttendance" />
		<property name="persistenceUnitName" value="attendancePU" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
				<property name="databasePlatform" value="org.hibernate.dialect.PostgreSQLDialect" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<!-- <qualifier value="btrs"/> -->
	</bean>

	<bean id="transactionManagerAttendance" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryAttendance" />
		<!-- <qualifier value="attendance"/> -->
	</bean>

	<jpa:repositories base-package="dao"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<jpa:repositories base-package="attendance.dao"
		transaction-manager-ref="transactionManagerAttendance"
		entity-manager-factory-ref="entityManagerFactoryAttendance" />

	<bean id="departmentService" class="service.impl.DepartmentServiceImpl">
		<constructor-arg ref="departmentDao" />
	</bean>

	<bean id="roleService" class="service.impl.RoleServiceImpl">
		<constructor-arg ref="roleDao" />
	</bean>


	<bean id="expenseCategoryService" class="service.impl.ExpenseCategoryServiceImpl">
		<constructor-arg ref="expenseCategoryDao" />
	</bean>

	<bean id="expenseService" class="service.impl.ExpenseServiceImpl">
		<constructor-arg ref="expenseDao" />
		<constructor-arg ref="expenseTypeDao" />
		<constructor-arg ref="reportDao" />
	</bean>

	<bean id="expenseTypeService" class="service.impl.ExpenseTypeServiceImpl">
		<constructor-arg ref="expenseTypeDao" />

	</bean>

	<bean id="expenseTypeParaService" class="service.impl.ExpenseTypeParaServiceImpl">
		<constructor-arg ref="expenseTypeDao" />
		<constructor-arg ref="typeParameterDao" />
		<constructor-arg ref="expenseTypeParaDao" />
	</bean>

	<bean id="parameterValueService" class="service.impl.ParameterValueServiceImpl">
		<constructor-arg ref="parameterValueDao" />
		<constructor-arg ref="typeParameterDao" />
		<constructor-arg ref="expenseDao" />
	</bean>

	<bean id="reportService" class="service.impl.ReportServiceImpl">
		<constructor-arg ref="reportDao" />
		<constructor-arg ref="attendRecordDao" />
		<constructor-arg ref="expenseDao" />
		<constructor-arg ref="expenseTypeDao" />
		<constructor-arg ref="parameterValueDao" />
		<constructor-arg ref="userDao" />
		<constructor-arg ref="userRoleDao" />
		<constructor-arg ref="statusChangeDao" />
		<constructor-arg ref="mailService" />
		<constructor-arg ref="mailWritter" />
	</bean>

	<bean id="statusChangeService" class="service.impl.StatusChangeServiceImpl">
		<constructor-arg ref="statusChangeDao" />
		<constructor-arg ref="reportDao" />
		<constructor-arg ref="userDao" />
	</bean>

	<bean id="typeParameterService" class="service.impl.TypeParameterServiceImpl">
		<constructor-arg ref="typeParameterDao" />
	</bean>

	<bean id="userRoleService" class="service.impl.UserRoleServiceImpl">
		<constructor-arg ref="userRoleDao" />
		<constructor-arg ref="userDao" />
		<constructor-arg ref="roleDao" />
	</bean>

	<bean id="userService" class="service.impl.UserServiceImpl">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="departmentDao" />
		<constructor-arg ref="userSharedDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>

	<bean id="userSharedService" class="service.impl.UserSharedServiceImpl">
		<constructor-arg ref="userSharedDao" />
	</bean>

	<bean id="userDetailService" class="service.impl.UserDetailServiceImpl">
		<constructor-arg ref="userSharedDao" />
	</bean>

	<bean id="attendRecordService" class="service.impl.DBAttendRecordService">
		<constructor-arg ref="attendRecordDao" />
		<constructor-arg ref="reportDao" />
	</bean>

	<!-- SPRING SECURITY SETUP -->

	<bean id="passwordEncoder" class="security.SHA1PasswordEncoder">
	</bean>

	<bean id="csrfHeaderFilter" class="security.CsrfHeaderFilter">
	</bean>

	<bean id="csrfTokenRepository"
		class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository">
		<property name="headerName" value="X-XSRF-TOKEN" />
	</bean>

	<bean id="entryPoint"
		class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
		<constructor-arg>
			<map>
				<entry key="hasHeader('X-Requested-With','XMLHttpRequest')"
					value-ref="ajaxEntyPoint" />
			</map>
		</constructor-arg>
		<property name="defaultEntryPoint" ref="defaultEntryPoint" />
	</bean>

	<bean id="ajaxEntyPoint"
		class="org.springframework.security.web.authentication.HttpStatusEntryPoint">
		<constructor-arg name="httpStatus"
			value="#{T(org.springframework.http.HttpStatus).UNAUTHORIZED}" />
	</bean>

	<bean id="defaultEntryPoint"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="Protected API" />
	</bean>
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userDetailService">
			<security:password-encoder ref="passwordEncoder"></security:password-encoder>
		</security:authentication-provider>
	</security:authentication-manager>


	<security:global-method-security
		secured-annotations="enabled" pre-post-annotations="enabled" />

	<security:http realm="Protected API" use-expressions="true"
		auto-config="true" authentication-manager-ref="authenticationManager">
		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/index.html"
			access="permitAll" />
		<security:intercept-url pattern="/login"
			access="permitAll" />
		<security:intercept-url method="GET"
			pattern="/rest/v1.0/auth" access="permitAll" />
		<security:intercept-url pattern="/rest/v1.0/**"
			access="permitAll" />
		<!-- <security:intercept-url method="GET" pattern="/rest/news/**" access="hasRole('user')" 
			/> <security:intercept-url method="PUT" pattern="/rest/news/**" access="hasRole('admin')" 
			/> <security:intercept-url method="POST" pattern="/rest/news/**" access="hasRole('admin')" 
			/> <security:intercept-url method="DELETE" pattern="/rest/news/**" access="hasRole('admin')" 
			/> -->
		<security:csrf token-repository-ref="csrfTokenRepository" />
		<security:custom-filter ref="csrfHeaderFilter"
			after="CSRF_FILTER" />
		<security:http-basic entry-point-ref="entryPoint" />
		<security:logout />
	</security:http>


</beans>